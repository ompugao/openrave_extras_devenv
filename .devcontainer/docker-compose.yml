version: '3'

services:
  app:
    # Using a Dockerfile is optional, but included for completeness.
    image: ompugao/openrave:melodic-desktop-full-cudnn8-gl
    build: 
      context: ..
      dockerfile: .devcontainer/Dockerfile.openrave
      args:
        from: ompugao/openrave-deps:melodic-desktop-full-cudnn8-gl

    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
      - ..:/workspace:cached
      - ../catkin_ws:/root/ros_catkin_ws/dev/src:cached
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTH}:${XAUTH}
      - ./.openrave:/root/.openrave:rw
      - ./.bash_history:/root/.bash_history:rw
      - ./.ipython:/root/.ipython:rw
      #- /tmp/.docker.xauth:/tmp/.docker.xauth
      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"  

    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    # network_mode: service:another-service
    # network_mode: host
    
    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined

    runtime: nvidia
    
    environment:
      XAUTHORITY: $XAUTH
      DISPLAY: ":1"
      QT_X11_NO_MITSHM: 1
      #OPENRAVE_BUILD_TYPE: Release
      #ROS_BUILD_TYPE: Release

